{"version":3,"sources":["components/TodoHeader/TodoHeader.tsx","components/TodoItems/TodoItems.tsx","components/TodoForm/TodoForm.tsx","components/Todo/Todo.js","index.js"],"names":["TodoHeader","_ref","headerText","react_default","a","createElement","className","TodoItems","todoItems","handleDelete","handleMarkComplete","map","item","key","id","style","completed","textDecoration","name","start","end","timeSpent","onClick","TodoForm","state","active","error","handleChange","event","_event$target","target","value","_this","setState","Object","defineProperty","newItems","filter","todo","localStorage","setItem","JSON","stringify","markComplete","objectSpread","handleSubmit","preventDefault","_this$state","newItem","concat","toConsumableArray","parse","getItem","length","newId","this","_this$state2","Fragment","onSubmit","htmlFor","type","onChange","placeholder","components_TodoItems_TodoItems","Component","Todo","components_TodoHeader_TodoHeader","components_TodoForm_TodoForm","ReactDOM","render","components_Todo_Todo","document","getElementById"],"mappings":"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","file":"static/js/main.1f30ded6.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./TodoHeader.css\";\n\nconst TodoHeader: React.SFC<{ headerText: string }> = ({ headerText }) => {\n  return (\n    <header className=\"headerContainer\">\n      <h1 className=\"headerText\">{headerText}</h1>\n    </header>\n  );\n};\n\nexport default TodoHeader;\n","import React from \"react\";\n\nimport \"./TodoItems.css\";\n\ninterface TodoItem {\n  id: number;\n  name: string;\n  start: string;\n  end: string;\n  timeSpent: number;\n  completed: boolean;\n  active: boolean;\n  todoItems: Array<object>;\n}\n\n// The TodoItems creates the UI for each individual todo list item. The handleDelete function will be used if a user want's to remove an item.\n\nconst TodoItems: React.SFC<{\n  todoItems: Array<TodoItem>;\n  handleDelete: (id: number) => void;\n  handleMarkComplete: (id: number) => void;\n}> = ({ todoItems, handleDelete, handleMarkComplete }) => {\n  return (\n    <section className=\"todoItemContainer\">\n      {todoItems.map(item => (\n        <div className=\"todoCard\" key={item.id}>\n          <h1\n            className=\"todoHeader\"\n            style={\n              item.completed\n                ? { textDecoration: \"line-through\" }\n                : { textDecoration: \"none\" }\n            }\n          >\n            {item.name}\n          </h1>\n          <p className=\"todoDate\">Start Date: {item.start} </p>\n          <p className=\"todoDate\"> End Date: {item.end}</p>\n          <p className=\"todoTime\">Time Spent: {item.timeSpent} hours</p>\n          <button className=\"todoButton\" onClick={() => handleDelete(item.id)}>\n            Delete Item\n          </button>\n          <button\n            className=\"todoButton\"\n            onClick={() => handleMarkComplete(item.id)}\n          >\n            Mark Complete\n          </button>\n        </div>\n      ))}\n    </section>\n  );\n};\n\nexport default TodoItems;\n","import React, { Component } from \"react\";\n\nimport TodoItems from \"../TodoItems/TodoItems\";\n\nimport \"./TodoForm.css\";\n\nexport interface TodoItem {\n  id: number;\n  name: string;\n  start: string;\n  end: string;\n  timeSpent: number;\n  completed: boolean;\n  active: boolean;\n}\n\n// This defines what the state object that the TodoForm will implement.\n// I passed an empty object to the TodoForm because there are no props that the TodoForm will use for now.\ninterface State {\n  id: number;\n  name: string;\n  start: string;\n  end: string;\n  timeSpent: number;\n  completed: boolean;\n  active: boolean;\n  error: boolean;\n  todoItems: Array<TodoItem>;\n}\n\nclass TodoForm extends Component<{}, State> {\n  state = {\n    id: 0,\n    name: \"\",\n    start: \"\",\n    end: \"\",\n    timeSpent: 0,\n    completed: false,\n    active: true,\n    error: false,\n    todoItems: []\n  };\n  // check to see if there exists a taskListTodo item in local storage\n  componentDidMount() {\n    // The localStorage.getItem function will return a string or a null,\n    let todoItems: any = JSON.parse(\n      localStorage.getItem(\"taskListTodos\") || \"[]\"\n    );\n    if (todoItems.length > 0) {\n      // we want to get the id of the last item in the todo list so that we can update the id in state so that there are not id's that are the same.\n      let newId = todoItems.length - 1;\n      this.setState({\n        id: todoItems[newId].id,\n        todoItems\n      });\n    }\n  }\n  // The handleChange method is a reusable function that will be used to create the list of controlled inputs to change the values of the name, start, end and timeSpent.\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    } as any);\n  };\n\n  handleDelete = (id: number): void => {\n    const { todoItems } = this.state;\n    let newItems = todoItems.filter((todo: TodoItem) => todo.id !== id);\n\n    // update local storage\n    localStorage.setItem(\"taskListTodos\", JSON.stringify(newItems));\n    this.setState({\n      todoItems: newItems\n    });\n  };\n\n  handleMarkComplete = (id: number): void => {\n    const { todoItems } = this.state;\n    let markComplete = todoItems.map((todo: TodoItem) =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    );\n\n    this.setState({\n      todoItems: markComplete\n    });\n  };\n\n  // The handleSubmit component will add a new object to the todoItems array when a user submits the form.\n  handleSubmit = event => {\n    // Use preventDefault so that the browser does not reload after the form is submitted.\n    event.preventDefault();\n    // Destructure the current items inside of state\n    const {\n      id,\n      name,\n      start,\n      end,\n      timeSpent,\n      active,\n      completed,\n      todoItems\n    } = this.state;\n    // create an object consisting of the form values, increment the id by one for each newItem created.\n    let newItem = {\n      id: id + 1,\n      name,\n      start,\n      end,\n      timeSpent,\n      completed,\n      active\n    };\n    // make sure that the name, start, end, and timeSpent objects aren't blank\n    if (!name || !start || !end || !timeSpent) {\n      this.setState({\n        error: true\n      });\n    } else {\n      // create a new array consisting of the current items inside of the todoItems array and the newItem object.\n      let newItems = [...todoItems, newItem];\n\n      // update state with the new array consisting of the items that exist in state and the new item consisting of the form values.\n      this.setState(\n        () => ({\n          todoItems: newItems,\n          id: id + 1,\n          name: \"\",\n          start: \"\",\n          end: \"\",\n          timeSpent: 0,\n          completed: false,\n          error: false,\n          active: true\n        }),\n        () => {\n          // update local storage\n          localStorage.setItem(\n            \"taskListTodos\",\n            JSON.stringify(this.state.todoItems)\n          );\n        }\n      );\n    }\n  };\n  render() {\n    const { name, start, end, timeSpent, todoItems, error } = this.state;\n    return (\n      <React.Fragment>\n        <form className=\"todoForm\" onSubmit={this.handleSubmit}>\n          <label className=\"todoLabel\" htmlFor=\"Task Name\">\n            Task Name\n          </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            className=\"todoInput\"\n            onChange={this.handleChange}\n            placeholder=\"Task Name...\"\n          />\n          <label className=\"todoLabel\" htmlFor=\"Start Date\">\n            Date Started\n          </label>\n          <input\n            type=\"date\"\n            name=\"start\"\n            value={start}\n            className=\"todoInput\"\n            onChange={this.handleChange}\n            placeholder=\"Start Date...\"\n          />\n          <label className=\"todoLabel\" htmlFor=\"Date Ended\">\n            Date Ending Approx.\n          </label>\n          <input\n            type=\"date\"\n            name=\"end\"\n            value={end}\n            className=\"todoInput\"\n            onChange={this.handleChange}\n            placeholder=\"End Date...\"\n          />\n          <label className=\"todoLabel\" htmlFor=\"Time Spent\">\n            Time Spent in Hours\n          </label>\n          <input\n            type=\"number\"\n            name=\"timeSpent\"\n            value={timeSpent}\n            className=\"todoInput\"\n            onChange={this.handleChange}\n            placeholder=\"Time Spent in hours...\"\n          />\n          <button\n            className=\"todoButton\"\n            onClick={this.handleSubmit}\n            type=\"button\"\n          >\n            Create Task List Item\n          </button>\n        </form>\n        {error && (\n          <h1 className=\"todoError\">* Please Check for missing fields.</h1>\n        )}\n        {todoItems.length > 0 && (\n          <TodoItems\n            todoItems={todoItems}\n            handleDelete={this.handleDelete}\n            handleMarkComplete={this.handleMarkComplete}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TodoForm;\n","import React from \"react\";\n\nimport TodoHeader from \"../TodoHeader/TodoHeader\";\nimport TodoForm from \"../TodoForm/TodoForm\";\n\nconst Todo = () => {\n  return (\n    <>\n      <TodoHeader headerText=\"Task List Todo List\" />\n      <TodoForm />\n    </>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Todo from \"./components/Todo/Todo\";\n\nReactDOM.render(<Todo />, document.getElementById(\"root\"));\n"],"sourceRoot":""}