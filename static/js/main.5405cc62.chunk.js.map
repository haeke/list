{"version":3,"sources":["components/TodoHeader/TodoHeader.js","components/TodoItems/TodoItems.js","components/TodoForm/TodoForm.js","components/Todo/Todo.js","index.js"],"names":["TodoHeader","_ref","headerText","react_default","a","createElement","className","TodoItems","todoItems","handleDelete","handleMarkComplete","map","item","key","id","style","completed","textDecoration","name","start","end","timeSpent","onClick","TodoForm","state","active","error","handleChange","event","_event$target","target","value","_this","setState","Object","defineProperty","newItems","filter","itemToMark","objectSpread","handleSubmit","preventDefault","_this$state","newItem","concat","toConsumableArray","_this$state2","this","Fragment","onSubmit","htmlFor","type","onChange","placeholder","length","components_TodoItems_TodoItems","Component","Todo","components_TodoHeader_TodoHeader","components_TodoForm_TodoForm","ReactDOM","render","components_Todo_Todo","document","getElementById"],"mappings":"0PAiBeA,eAZI,SAAAC,GAAoB,IAAjBC,EAAiBD,EAAjBC,WACpB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcJ,+DC6CnBK,SA9CG,SAAAN,GAAqD,IAAlDO,EAAkDP,EAAlDO,UAAWC,EAAuCR,EAAvCQ,aAAcC,EAAyBT,EAAzBS,mBAC5C,OACEP,EAAAC,EAAAC,cAAA,WAASC,UAAU,qBAChBE,EAAUG,IAAI,SAAAC,GAAI,OACjBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWO,IAAKD,EAAKE,IAClCX,EAAAC,EAAAC,cAAA,MACEC,UAAU,aACVS,MACEH,EAAKI,UACD,CAAEC,eAAgB,gBAClB,CAAEA,eAAgB,SAGvBL,EAAKM,MAERf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,eAAqCM,EAAKO,MAA1C,KACAhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,cAAoCM,EAAKQ,KACzCjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,eAAqCM,EAAKS,WAC1ClB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAagB,QAAS,kBAAMb,EAAaG,EAAKE,MAAhE,eAGAX,EAAAC,EAAAC,cAAA,UACEC,UAAU,aACVgB,QAAS,kBAAMZ,EAAmBE,EAAKE,MAFzC,uBC4IKS,oNAjKbC,MAAQ,CACNV,GAAI,EACJI,KAAM,GACNC,MAAO,GACPC,IAAK,GACLC,UAAW,EACXL,WAAW,EACXS,QAAQ,EACRC,OAAO,EACPlB,UAAW,MAGbmB,aAAe,SAAAC,GAAS,IAAAC,EACED,EAAME,OAAtBZ,EADcW,EACdX,KAAMa,EADQF,EACRE,MAEdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGhB,EAAOa,OAKZtB,aAAe,SAAAK,GAAM,IAGfsB,EAFkBJ,EAAKR,MAAnBhB,UAEiB6B,OAAO,SAAAzB,GAAI,OAAIA,EAAKE,KAAOA,IAEpDkB,EAAKC,SAAS,CACZzB,UAAW4B,OAIf1B,mBAAqB,SAAAI,GAAM,IAGrBwB,EAFkBN,EAAKR,MAAnBhB,UAEmBG,IAAI,SAAAC,GAAI,OACjCA,EAAKE,KAAOA,EAAZoB,OAAAK,EAAA,EAAAL,CAAA,GAAsBtB,EAAtB,CAA4BI,WAAW,IAASJ,IAElDoB,EAAKC,SAAS,iBAAO,CACnBzB,UAAW8B,QAKfE,aAAe,SAAAZ,GAEbA,EAAMa,iBAFgB,IAAAC,EAalBV,EAAKR,MARPV,EALoB4B,EAKpB5B,GACAI,EANoBwB,EAMpBxB,KACAC,EAPoBuB,EAOpBvB,MACAC,EARoBsB,EAQpBtB,IACAC,EAToBqB,EASpBrB,UACAI,EAVoBiB,EAUpBjB,OACAT,EAXoB0B,EAWpB1B,UACAR,EAZoBkC,EAYpBlC,UAEF,GAAKU,GAASC,GAAUC,GAAQC,EAIzB,CAEL,IAAIsB,EAAU,CACZ7B,KACAI,OACAC,QACAC,MACAC,YACAL,YACAS,UAGEW,EAAQ,GAAAQ,OAAAV,OAAAW,EAAA,EAAAX,CAAO1B,GAAP,CAAkBmC,IAG9BX,EAAKC,SAAS,iBAAO,CACnBzB,UAAW4B,EACXtB,GAAIA,EAAK,EACTI,KAAM,GACNC,MAAO,GACPC,IAAK,GACLC,UAAW,EACXL,WAAW,EACXS,QAAQ,EACRC,OAAO,UA3BTM,EAAKC,SAAS,CACZP,OAAO,6EA8BJ,IAAAoB,EACmDC,KAAKvB,MAAvDN,EADD4B,EACC5B,KAAMC,EADP2B,EACO3B,MAAOC,EADd0B,EACc1B,IAAKC,EADnByB,EACmBzB,UAAWb,EAD9BsC,EAC8BtC,UAAWkB,EADzCoB,EACyCpB,MAChD,OACEvB,EAAAC,EAAAC,cAACF,EAAAC,EAAM4C,SAAP,KACE7C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAW2C,SAAUF,KAAKP,cACxCrC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY4C,QAAQ,aAArC,aAGA/C,EAAAC,EAAAC,cAAA,SACE8C,KAAK,OACLjC,KAAK,OACLa,MAAOb,EACPZ,UAAU,YACV8C,SAAUL,KAAKpB,aACf0B,YAAY,iBAEdlD,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY4C,QAAQ,cAArC,gBAGA/C,EAAAC,EAAAC,cAAA,SACE8C,KAAK,OACLjC,KAAK,QACLa,MAAOZ,EACPb,UAAU,YACV8C,SAAUL,KAAKpB,aACf0B,YAAY,kBAEdlD,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY4C,QAAQ,cAArC,uBAGA/C,EAAAC,EAAAC,cAAA,SACE8C,KAAK,OACLjC,KAAK,MACLa,MAAOX,EACPd,UAAU,YACV8C,SAAUL,KAAKpB,aACf0B,YAAY,gBAEdlD,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAY4C,QAAQ,cAArC,uBAGA/C,EAAAC,EAAAC,cAAA,SACE8C,KAAK,SACLjC,KAAK,YACLa,MAAOV,EACPf,UAAU,YACV8C,SAAUL,KAAKpB,aACf0B,YAAY,2BAEdlD,EAAAC,EAAAC,cAAA,UACEC,UAAU,aACVgB,QAASyB,KAAKP,aACdW,KAAK,UAHP,0BAQDzB,GACCvB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,sCAEDE,EAAU8C,OAAS,GAClBnD,EAAAC,EAAAC,cAACkD,EAAD,CACE/C,UAAWA,EACXC,aAAcsC,KAAKtC,aACnBC,mBAAoBqC,KAAKrC,6BA1Jd8C,cCQRC,EATF,WACX,OACEtD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4C,SAAA,KACE7C,EAAAC,EAAAC,cAACqD,EAAD,CAAYxD,WAAW,wBACvBC,EAAAC,EAAAC,cAACsD,EAAD,QCJNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAAUC,SAASC,eAAe","file":"static/js/main.5405cc62.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./TodoHeader.css\";\n\nconst TodoHeader = ({ headerText }) => {\n  return (\n    <header className=\"headerContainer\">\n      <h1 className=\"headerText\">{headerText}</h1>\n    </header>\n  );\n};\n\nTodoHeader.propTypes = {\n  headerText: PropTypes.string\n};\n\nexport default TodoHeader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./TodoItems.css\";\n\n// The TodoItems creates the UI for each individual todo list item. The handleDelete function will be used if a user want's to remove an item.\n\nconst TodoItems = ({ todoItems, handleDelete, handleMarkComplete }) => {\n  return (\n    <section className=\"todoItemContainer\">\n      {todoItems.map(item => (\n        <div className=\"todoCard\" key={item.id}>\n          <h1\n            className=\"todoHeader\"\n            style={\n              item.completed\n                ? { textDecoration: \"line-through\" }\n                : { textDecoration: \"none\" }\n            }\n          >\n            {item.name}\n          </h1>\n          <p className=\"todoDate\">Start Date: {item.start} </p>\n          <p className=\"todoDate\"> End Date: {item.end}</p>\n          <p className=\"todoTime\">Time Spent: {item.timeSpent}</p>\n          <button className=\"todoButton\" onClick={() => handleDelete(item.id)}>\n            Delete Item\n          </button>\n          <button\n            className=\"todoButton\"\n            onClick={() => handleMarkComplete(item.id)}\n          >\n            Mark Complete\n          </button>\n        </div>\n      ))}\n    </section>\n  );\n};\n\nTodoItems.propTypes = {\n  todoItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      end: PropTypes.string,\n      timeSpent: PropTypes.string\n    })\n  ),\n  handleDelete: PropTypes.func,\n  handleMarkComplete: PropTypes.func\n};\n\nexport default TodoItems;\n","import React, { Component } from \"react\";\n\nimport TodoItems from \"../TodoItems/TodoItems\";\n\nimport \"./TodoForm.css\";\n\nclass TodoForm extends Component {\n  state = {\n    id: 0,\n    name: \"\",\n    start: \"\",\n    end: \"\",\n    timeSpent: 0,\n    completed: false,\n    active: true,\n    error: false,\n    todoItems: []\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  // The handleDelete function requires the id of the todoItem to be deleted. It uses the filter method to return all of the todoItems that do not contain the particular id.\n  handleDelete = id => {\n    const { todoItems } = this.state;\n\n    let newItems = todoItems.filter(item => item.id !== id);\n\n    this.setState({\n      todoItems: newItems\n    });\n  };\n\n  handleMarkComplete = id => {\n    const { todoItems } = this.state;\n    // loop through the todoItems array, set the completed boolean to true where the id matches the id passed from the TodoItems component.\n    let itemToMark = todoItems.map(item =>\n      item.id === id ? { ...item, completed: true } : item\n    );\n    this.setState(() => ({\n      todoItems: itemToMark\n    }));\n  };\n\n  // The handleSubmit component will add a new object to the todoItems array when a user submits the form.\n  handleSubmit = event => {\n    // Use preventDefault so that the browser does not reload after the form is submitted.\n    event.preventDefault();\n    // Destructure the current items inside of state\n    const {\n      id,\n      name,\n      start,\n      end,\n      timeSpent,\n      active,\n      completed,\n      todoItems\n    } = this.state;\n    if (!name || !start || !end || !timeSpent) {\n      this.setState({\n        error: true\n      });\n    } else {\n      // create an object consisting of the form values, increment the id by one for each newItem created.\n      let newItem = {\n        id,\n        name,\n        start,\n        end,\n        timeSpent,\n        completed,\n        active\n      };\n      // create a new array consisting of the current items inside of the todoItems array and the newItem object.\n      let newItems = [...todoItems, newItem];\n\n      // update state with the new array consisting of the items that exist in state and the new item consisting of the form values.\n      this.setState(() => ({\n        todoItems: newItems,\n        id: id + 1,\n        name: \"\",\n        start: \"\",\n        end: \"\",\n        timeSpent: 0,\n        completed: false,\n        active: true,\n        error: false\n      }));\n    }\n  };\n  render() {\n    const { name, start, end, timeSpent, todoItems, error } = this.state;\n    return (\n      <React.Fragment>\n        <form className=\"todoForm\" onSubmit={this.handleSubmit}>\n          <label className=\"todoLabel\" htmlFor=\"Task Name\">\n            Task Name\n          </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            className=\"todoInput\"\n            onChange={this.handleChange}\n            placeholder=\"Task Name...\"\n          />\n          <label className=\"todoLabel\" htmlFor=\"Start Date\">\n            Date Started\n          </label>\n          <input\n            type=\"date\"\n            name=\"start\"\n            value={start}\n            className=\"todoInput\"\n            onChange={this.handleChange}\n            placeholder=\"Start Date...\"\n          />\n          <label className=\"todoLabel\" htmlFor=\"Date Ended\">\n            Date Ending Approx.\n          </label>\n          <input\n            type=\"date\"\n            name=\"end\"\n            value={end}\n            className=\"todoInput\"\n            onChange={this.handleChange}\n            placeholder=\"End Date...\"\n          />\n          <label className=\"todoLabel\" htmlFor=\"Time Spent\">\n            Time Spent in Hours\n          </label>\n          <input\n            type=\"number\"\n            name=\"timeSpent\"\n            value={timeSpent}\n            className=\"todoInput\"\n            onChange={this.handleChange}\n            placeholder=\"Time Spent in hours...\"\n          />\n          <button\n            className=\"todoButton\"\n            onClick={this.handleSubmit}\n            type=\"button\"\n          >\n            Create Task List Item\n          </button>\n        </form>\n        {error && (\n          <h1 className=\"todoError\">* Please Check for missing fields.</h1>\n        )}\n        {todoItems.length > 0 && (\n          <TodoItems\n            todoItems={todoItems}\n            handleDelete={this.handleDelete}\n            handleMarkComplete={this.handleMarkComplete}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TodoForm;\n","import React from \"react\";\n\nimport TodoHeader from \"../TodoHeader/TodoHeader\";\nimport TodoForm from \"../TodoForm/TodoForm\";\n\nconst Todo = () => {\n  return (\n    <>\n      <TodoHeader headerText=\"Task List Todo List\" />\n      <TodoForm />\n    </>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Todo from \"./components/Todo/Todo\";\n\nReactDOM.render(<Todo />, document.getElementById(\"root\"));\n"],"sourceRoot":""}